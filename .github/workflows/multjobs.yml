# This workflow defines the CI/CD pipeline for the Spring Boot application.
name: Spring Boot CI/CD Pipeline

# Controls when the workflow will run
on:
  # Triggers the workflow on push events but only for the "main" branch
  push:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  build-and-deploy:
    # The type of runner that the job will run on
    # 'self-hosted' means it will run on the runner you configured on your local machine.
    runs-on: self-hosted

    steps:
      # 1. Checkout the code from the repository
      - name: Checkout Code
        uses: actions/checkout@v4

      # 2. Set up JDK 17
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      # 3. Build with Maven
      # This step runs the Maven package command to compile the code, run tests, and package it into a JAR file.
      - name: Build with Maven
        run: mvn clean package

      # 4. Login to Docker Hub
      # This uses the secrets you configured in your repository settings to securely log in to Docker Hub.
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 5. Get project version from pom.xml
      # This step extracts the version from the pom.xml file to use it as a Docker image tag.
      - name: Extract project version
        id: get_version
        run: echo "VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)" >> $GITHUB_OUTPUT

      # 6. Build and push Docker image
      # This step builds the Docker image and pushes it to Docker Hub with two tags:
      # - The version number (e.g., 0.0.1-SNAPSHOT)
      # - 'latest'
      - name: Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}:${{ steps.get_version.outputs.VERSION }}
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}:latest

      # 7. Deploy with Docker Compose
      # This step pulls the latest image from Docker Hub and starts the container using docker-compose.
      # The `DOCKER_IMAGE` env var dynamically updates the image used in docker-compose.yml.
      - name: Deploy with Docker Compose
        run: |
          export DOCKER_IMAGE=${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}:latest
          docker-compose -f docker-compose.yml down
          docker-compose -f docker-compose.yml pull
          docker-compose -f docker-compose.yml up -d
